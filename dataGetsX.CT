<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"00412DCD 이미지 그리기"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>00412DCD</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Gui test 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

define(Debugs,00510000)
Registersymbol(Debugs)
label(Rets)
label(stackCheack)
////////////////////////////////
define(datalist,00511000)
Registersymbol(datalist)
////////////////////////////////////////
define(start,00512000)
Registersymbol(start)
//////////////////////////////
define(memsetX,00513000)
Registersymbol(memsetX)
label(goto2)
label(goto3)
/////////////////////////////
define(Switch,00514000)
Registersymbol(Switch)
label(xors)
label(Post)
label(UsersBeginePaint)
label(GetSystem)
label(EndX)
//////////////////////
define(WinGUI,00515000)
Registersymbol(WinGUI)
//////////////////////
define(main,00516000)
Registersymbol(main)
define(loaddll,00517000)
Registersymbol(loaddll)
define(Pointers,00518000)
Registersymbol(Pointers)

define(handleX,00519000)
Registersymbol(handleX)//Static

define(Static,0051A000)
Registersymbol(Static)//Static





define(sizefilesa,00762000)
Registersymbol(sizefilesa)
define(loadMemory,00765000)//malloc
Registersymbol(loadMemory)
define(unaddress,00775000)
Registersymbol(unaddress)
define(startapiX,0076f000)
Registersymbol(startapiX)



sizefilesa:
dd #428
unaddress:
db '.\etc\logo\main.bmp' 00
unaddress+40:
db '.\etc\logo\main.bmp' 00

startapiX:
push [sizefilesa] //size
push loadMemory //빈공간에 로드할 address
push unaddress //멀티바이트 어드레스
call ucrtbased.strlen //ucrtbasaeloasd
add esp,04
push [sizefilesa] //size
push unaddress //멀티바이트 어드레스
push 00
push 0000FDE9 //형식 CP_UTF8 의 형식임을 따른다.
call kernel32.MultiByteToWideChar

push [sizefilesa] //size
push loadMemory //빈공간에 로드할 address
push unaddress+40 //멀티바이트 어드레스
call ucrtbased.strlen //ucrtbasaeloasd
add esp,04
push [sizefilesa] //size
push unaddress+40 //멀티바이트 어드레스
push 00
push 0000FDE9 //형식 CP_UTF8 의 형식임을 따른다.
call kernel32.MultiByteToWideChar

ret


Static:
db 's' 00 't' 00 'a' 00 't' 00 'i' 00 'c' 00 00 00 //static

Static-50:
db //84 BC BC D2 20 00 74 D0 AD B9 00 00 //createBunt

Static-100:
db 62 00 72 00 6F 00 61 00 2E 00 62 00 6D 00 70 00 00 00 00 00 00 00 00 00 01 C8 A9 C6 00 00 00 00 00 00


Debugs:
push ebp
mov ebp,esp
sub esp,08
mov [ebp-04],ecx
mov eax,[ebp-04]
mov [ebp-08],eax
mov ecx,[ebp-04]
movzx edx,byte ptr [ecx]
test edx,edx
je Rets
call kernel32.GetCurrentThreadId
jne Rets

Rets:
mov esp,ebp
pop ebp
ret

stackCheack:
repne jne stackCheack+5
repne ret
push ebp
mov ebp,esp
sub esp,00
push eax




datalist:
dd 1
datalist+8://헬로 윈도우 프롬트 창
db 48 00 45 00 4C 00 4C 00 4F 00 57 00 49 00 4E 00 44 00 4F 00 57 00 53 00 00 00 00 00 00 00 00 00 1F AA
datalist+100://제목 출력
db 44 00 42 00 56 00 4D 00 20 00 57 00 65 00 62 00 20 00 42 00 72 00 6F 00 73 00 65 00 72 00 00 00 70 00
datalist+200: //프로즌 헬로 윈도우 PE
db 48 00 45 00 4C 00 4C 00 4F 00 57 00 49 00 4E 00 44 00 4F 00 57 00 53 00 00 00 //헬로 윈도우
datalist+300:
db 00 00 'A' 00 'B' 00 'A' 00 'N' 00 'D' 00 'O' 00 'N' 00 'W' 00 'a' 00 'r' 00 'e' 00 'v' 00 'e' 00 'r' 00 '1' 00 00 00 00 00 00 00



Switch:
push ebp
mov ebp,esp
sub esp,00000130 { 304 }
push ebx
push esi
push edi
lea edi,[ebp-70]
mov ecx,0000001C { 28 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,datalist
call Debugs
mov eax,[ebp+0C]
mov [ebp-00000130],eax
cmp dword ptr [ebp-00000130],01 { 1 }
je xors
cmp dword ptr [ebp-00000130],02 { 2 }
je Post//dllgotosgui.WndProc5+C5
cmp dword ptr [ebp-00000130],0F { 15 }
je UsersBeginePaint//dllgotosgui.WndProc5+59
jmp GetSystem//dllgotosgui.WndProc5+DA
xors:
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
UsersBeginePaint:
mov esi,esp
lea eax,[ebp-50]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.BeginPaint//win32u.NtUserBeginPaint //UsersBeginePaint//dword ptr [dllgotosgui._imp__BeginPaint] { -&gt;-&gt;win32u.NtUserBeginPaint } //UsersBeginePaint
cmp esi,esp
call stackCheack
mov [ebp-08],eax
mov esi,esp
lea eax,[ebp-68]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.GetClientRect//dword ptr [dllgotosgui._imp__GetClientRect] { -&gt;USER32.GetClientRect }
cmp esi,esp
call stackCheack
mov esi,esp
push 25 { 37 }
lea eax,[ebp-68]
push eax
push -01 { 255 }
push datalist+300//dllgotosgui.dll+178CC //mesage{ ("Hello, Windows!") }
mov ecx,[ebp-08]
push ecx
call USER32.DrawTextW //dword ptr [dllgotosgui._imp__DrawTextW] { -&gt;USER32.DrawTextW }
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-50]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.EndPaint//dword ptr [dllgotosgui._imp__EndPaint] { -&gt;-&gt;win32u.NtUserEndPaint }
cmp esi,esp
call stackCheack
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
Post:
mov esi,esp
push 00 { 0 }
call USER32.PostQuitMessage//dword ptr [dllgotosgui._imp__PostQuitMessage] { -&gt;USER32.PostQuitMessage }
cmp esi,esp
call stackCheack
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
GetSystem:
mov esi,esp
mov eax,[ebp+14]
push eax
mov ecx,[ebp+10]
push ecx
mov edx,[ebp+0C]
push edx
mov eax,[ebp+08]
push eax
call ntdll.NtdllDefWindowProc_W
//USER32.GetSystemMetricsForDpi+D0//00404000//00404000/USER32.gapfnScSendMessage+AD8// USER32.GetSystemMetricsForDpi+D0//USER32.gapfnScSendMessage+AD8//USER32.GetSystemMetricsForDpi+D0//dword ptr [dllgotosgui._imp__DefWindowProcW] { -&gt;-&gt;USER32.GetSystemMetricsForDpi+D0 }
cmp esi,esp
call stackCheack
EndX:
push edx
mov ecx,ebp
push eax
mov edx,2 { (2) }//lea edx,[dllgotosgui.WndProc5+120] { (2) }
//call dllgotosgui.dll+111CC
pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,00000130 { 304 }
cmp ebp,esp
call stackCheack
mov esp,ebp
pop ebp
ret 0010 { 16 }




WinGUI:
push ebp
mov ebp,esp
sub esp,00000120 { 288 }
push ebx
push esi
push edi
lea edi,[ebp-60]
mov ecx,00000018 { 24 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,datalist//dllgotosgui.dll+1C016 { (1) }
call Debugs//dllgotosgui.dll+112DF
mov [ebp-5C],00000003 { 3 }
mov [ebp-58],Switch //dllgotosgui.dll+11078 { (418793) }
mov [ebp-54],00000000 { 0 }
mov [ebp-50],00000000 { 0 }
mov eax,[ebp+08]
mov [ebp-4C],eax
mov esi,esp
push 00007F00 { 32512 }
push 00 { 0 }
call USER32.LoadIconW //dword ptr [dllgotosgui._imp__LoadIconW] { -&gt;USER32.LoadIconW }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-48],eax
mov esi,esp
push 00007F00 { 32512 }
push 00 { 0 }
call USER32.LoadCursorW//dword ptr [dllgotosgui._imp__LoadCursorW] { -&gt;USER32.LoadCursorW }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-44],eax
mov esi,esp
push 00 { 0 }
call GDI32.GetStockObject//dword ptr [dllgotosgui._imp__GetStockObject] { -&gt;GDI32.GetStockObject }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-40],eax
mov [ebp-3C],00000000 { 0 }
mov [ebp-38],datalist+8//ClassOwnUTF////dllgotosgui.dll+1A000 { ("HELLOWINDOWS") }
mov esi,esp
lea eax,[ebp-5C]
push eax
call USER32.RegisterClassW //dword ptr [dllgotosgui._imp__RegisterClassW] { -&gt;USER32.RegisterClassW }
cmp esi,esp
call stackCheack
cmp esi,esp
call stackCheack
mov esi,esp
push 00 { 0 }
mov eax,[ebp+08]
push eax
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push #1380// X 0000012C { 300 }
push #1430// Y 00000258 { 600 }
push 64 { 100 }
push 64 { 100 }
push 10CF0000 { 282001408 }  // WS_OVERLAPPEDWINDOW } //WS_VISIBLE
push datalist+100//dllgotosgui.dll+1788C// DBVM Web Broser//{ ("Hello Windows Application") }
push datalist+200//datalist+200// Type dllgotosgui.dll+1A000 { ("HELLOWINDOWS") }
push 00 { 0 }
call USER32.CreateWindowExW
call stackCheack
mov [handleX],eax
mov [ebp-08],eax




mov esi,esp
push Static-50{ (-759382908) }
push 00 { 0 }
push 00 { 0 }
mov eax,[ebp-08]
push eax
call USER32.FindWindowExW { -&gt;USER32.FindWindowExW }
cmp esi,esp
call stackCheack

mov [handleX+4],eax
mov [ebp-68],eax


mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
mov eax,[ebp-08] //위치 세이브
push eax
push 64{ 100 }
push 64 { 100 }
push 10 { 25 }// 오른쪽왼쪽
push 0 { 70 } //오른쪽 왼쪽
push 5000000E { 1342177294 }
push 00 { 0 }


push Static{ ("Static") }
push 00 { 0 }
call USER32.CreateWindowExW { -&gt;USER32.CreateWindowExW }
cmp esi,esp
call stackCheack
//save??
mov [handleX+8],eax
mov [ebp-68],eax

push 10 { 16 }
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push loadMemory//path //Static-100 //imagi
push 00 { 0 }
call USER32.LoadImageW { -&gt;USER32.LoadImageW }
cmp esi,esp
call stackCheack

mov [handleX+C],eax


mov esi,esp
mov eax,[handleX+C] { (2114267942) }
push eax
push 00 { 0 }
push 00000172 { 370 }
mov ecx,[handleX+8] { (853824) }
push ecx
call USER32.SendMessageW  { -&gt;USER32.SendMessageW }
call stackCheack
mov [ebp-68],eax



mov esi,esp
mov eax,[ebp+14]
push eax
mov ecx,[ebp-08]
push ecx
call USER32.ShowWindow//win32u.NtUserShowWindow
cmp esi,esp
call stackCheack
mov esi,esp
mov eax,[ebp-08]
push eax
call USER32.UpdateWindow
cmp esi,esp
call stackCheack
jmp 00401000
GetMesageun24loop:
mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
lea eax,[ebp-2C]
push eax
call USER32.GetMessageW
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.TranslateMessage
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.DispatchMessageW
cmp esi,esp
call stackCheack
jmp GetMesageun24loop
mov eax,[ebp-24]
push edx
mov ecx,ebp
push eax
mov edx,2

pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,00000120 { 288 }
cmp ebp,esp
call stackCheack
mov esp,ebp
pop ebp
ret


memsetX:
push ebp
mov ebp,esp
sub esp,48
push 44
push 00
lea eax,[ebp-48]
push eax
call ntdll.memset
add esp,0C
lea ecx,[ebp-48]
push ecx
call kernel32.GetStartupInfoW
mov edx,[ebp-1C]
and edx,01
je goto2
movzx eax,wordptr[ebp-18]
mov [ebp-04],eax
jmp goto3
goto2:
mov [ebp-04],0000000A
goto3:
mov ax,[ebp-04]
mov esp,ebp
pop ebp
ret


datalist+400:
db 'C:Windows/SysWOW64/dvapi32.dll'
datalist+440:
db 'C:WindowsSysWOW64/msvcrt.dll'
datalist+480:
db 'C:Windows/SysWOW64/msvcp140d.dll'
datalist+4c0:
db 'C:Windows/SysWOW64/winnsi.dll'
datalist+500:
db '.load64/mfc140ud.dll'
datalist+540:
db '.load64/ucrtbased.dll'

main+200:
//push #20
//call sleep
push ebp
mov ebp,esp
sub esp,08
call memsetX
movzx eax,ax
mov [ebp-04],eax
mov [ebp-08],eax
mov ecx,[ebp-04]
push ecx
mov edx,[ebp-08]
push edx
push 00
push 00400000//header
call WinGUI
mov esp,ebp
pop ebp
ret



main: //startapiX
push 0
push 0
push startapiX//start
push startapiX//start
push 0
push 0
call createThread

push #75
call sleep

push 0
push 0
push main+200//start
push main+200//start
push 0
push 0
call createThread
ret

createThread(main)


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"GUI Tester2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

define(woncode,00403100)
Registersymbol(woncode)

woncode:
db 01 01 01 01 01 01 01 00
woncode+30:
db 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00
woncode-50:// path
db 69 00 6E 00 64 00 65 00 78 00 2E 00 70 00 6E 00 67 00 00 00 00 00 00
00412DCD:
jmp 00401000

define(diret,00401900)
Registersymbol(diret)

diret:
repne jne diret+5
repne ret
push ebp
mov ebp,esp
sub esp,00
push eax






label(debug)
label(Rets)



debug:
push ebp
mov ebp,esp
sub esp,08
mov [ebp-04],ecx
mov eax,[ebp-04]
mov [ebp-08],eax
mov ecx,[ebp-04]
movzx edx,byte ptr [ecx]
test edx,edx
je Rets
call kernel32.GetCurrentThreadId
jne Rets
Rets:
mov esp,ebp
pop ebp
ret


size:
push ebp
mov ebp,esp
sub esp,000000C0 { 192 }
push ebx
push esi
push edi
mov edi,ebp
xor ecx,ecx
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,woncode+30//Projfeect1.exe+1F012 { (1) }
call debug//Projfeect1.exe+1141F
mov eax,[ebp+08]
push eax
call gdiplus.GdipAlloc
pop edi
pop esi
pop ebx
add esp,000000C0 { 192 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret

define(vtavle,007CCC00)
Registersymbol(vtavle)
vtavle:
db 03 12 41 00 D6 11 41 00 00 00 00 00 47 00 65 00 74 00 74 00 69 00 6E 00 67 00 53 00 74 00 61 00 72 00 74 00 65 00 64 00 00 00 00 00 00 00 00 00 47 00 65 00 74 00 74 00 69 00 6E 00 67 00 20 00 53 00 74 00 61 00 72 00 74 00 65 00 64 00 00 00 00 00 00 00 00 00 00 00 69 00 6E 00 64 00 65 00 78 00 2E 00 70 00 6E 00 67 00 00 00 00 00 00 00 00 00 80 3F 88 BA 41 00 E2 14 41 00 00 00 00 00 70 AC 41 00 80 AD 41 00 D8 AE 41 00 FC AE 41 00 3C AF 41 00 70 AF 41 00 01 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 53 74 61 63 6B 20 61 72 6F 75 6E 64 20 74 68 65 20 76 61 72 69 61 62 6C 65 20 27 00 27 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 2E 00 00 00 00 54 68 65 20 76 61 72 69 61 62 6C 65 20 27 00 00 27 20 69 73 20 62 65 69 6E 67 20 75 73 65 64 20 77 69 74 68 6F 75 74 20 62 65 69 6E 67 20 69 6E 69 74 69 61 6C 69 7A 65 64 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 54 68 65 20 76 61 6C 75 65 20 6F 66 20 45 53 50 20 77 61 73 20 6E 6F 74 20 70 72 6F 70 65 72 6C 79 20 73 61 76 65 64 20 61 63 72 6F 73 73 20 61 20 66 75 6E 63 74 69 6F 6E 20 63 61 6C 6C 2E 20 20 54 68 69 73 20 69 73 20 75 73 75 61 6C 6C 79 20 61 20 72 65 73 75 6C 74 20 6F 66 20 63 61 6C 6C 69 6E 67 20 61 20 66 75 6E 63 74 69 6F 6E 20 64 65 63 6C 61 72 65 64 20 77 69 74 68 20 6F 6E 65 20 63 61 6C 6C 69 6E 67 20 63 6F 6E 76 65 6E 74 69 6F 6E 20 77 69 74 68 20 61 20 66 75 6E 63 74 69 6F 6E 20 70 6F 69 6E 74 65 72 20 64 65 63 6C 61 72 65 64 20 77 69 74 68 20 61 20 64 69 66 66 65 72 65 6E 74 20 63 61 6C 6C 69 6E 67 20 63 6F 6E 76 65 6E 74 69 6F 6E 2E 0D 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 20 63 61 73 74 20 74 6F 20 61 20 73 6D 61 6C 6C 65 72 20 64 61 74 61 20 74 79 70 65 20 68 61 73 20 63 61 75 73 65 64 20 61 20 6C 6F 73 73 20 6F 66 20 64 61 74 61 2E 20 20 49 66 20 74 68 69 73 20 77 61 73 20 69 6E 74 65 6E 74 69 6F 6E 61 6C 2C 20 79 6F 75 20 73 68 6F 75 6C 64 20 6D 61 73 6B 20 74 68 65 20 73 6F 75 72 63 65 20 6F 66 20 74 68 65 20 63 61 73 74 20 77 69 74 68 20 74 68 65 20 61 70 70 72 6F 70 72 69 61 74 65 20 62 69 74 6D 61 73 6B 2E 20 20 46 6F 72 20 65 78 61 6D 70 6C 65 3A 20 20 0D 0A 09 63 68 61 72 20 63 20 3D 20 28 69 20 26 20 30 78 46 46 29 3B 0D 0A 43 68 61 6E 67 69 6E 67 20 74 68 65 20 63 6F 64 65 20 69 6E 20 74 68 69 73 20 77 61 79 20 77 69 6C 6C 20 6E 6F 74 20 61 66 66 65 63 74 20 74 68 65 20 71 75 61 6C 69 74 79 20 6F 66 20 74 68 65 20 72 65 73 75 6C 74 69 6E 67 20 6F 70 74 69 6D 69 7A 65 64 20 63 6F 64 65 2E 0D 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 0D 0A 00 00 00 00 00 00 00 00 41 20 6C 6F 63 61 6C 20 76 61 72 69 61 62 6C 65 20 77 61 73 20 75 73 65 64 20 62 65 66 6F 72 65 20 69 74 20 77 61 73 20 69 6E 69 74 69 61 6C 69 7A 65 64 0D 0A 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 0D 0A 00 00 00 00 00 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 52 75 6E 74 69 6D 65 20 43 68 65 63 6B 20 45 72 72 6F 72 0D 0A 00 00 00 00 00 00 00 00 00 00 00 52 00 75 00 6E 00 74 00 69 00 6D 00 65 00 20 00 43 00 68 00 65 00 63 00 6B 00 20 00 45 00 72 00 72 00 6F 00 72 00 2E 00 0D 00 0A 00 20 00 55 00 6E 00 61 00 62 00 6C 00 65 00 20 00 74 00 6F 00 20 00 64 00 69 00 73 00 70 00 6C 00 61 00 79 00 20 00 52 00 54 00 43 00 20 00 4D 00 65 00 73 00 73 00 61 00 67 00 65 00 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 00 75 00 6E 00 2D 00 54 00 69 00 6D 00 65 00 20 00 43 00 68 00 65 00 63 00 6B 00 20 00 46 00 61 00 69 00 6C 00 75 00 72 00 65 00 20 00 23 00 25 00 64 00 20 00 2D 00 20 00 25 00 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 46 69 6C 65 6E 61 6D 65 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 4D 6F 64 75 6C 65 20 4E 61 6D 65 00 00 00 00 00 52 75 6E 2D 54 69 6D 65 20 43 68 65 63 6B 20 46 61 69 6C 75 72 65 20 23 25 64 20 2D 20 25 73 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 63 6F 72 72 75 70 74 65 64 20 6E 65 61 72 20 75 6E 6B 6E 6F 77 6E 20 76 61 72 69 61 62 6C 65 00 00 00 00 00 00 00 00 00 00 00 25 2E 32 58 20 00 00 00 53 74 61 63 6B 20 61 72 65 61 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 6D 65 6D 6F 72 79 20 72 65 73 65 72 76 65 64 20 62 79 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 20 69 73 20 63 6F 72 72 75 70 74 65 64 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00 3E 20 00 00 0A 44 61 74 61 3A 20 3C 00 00 00 00 0A 41 6C 6C 6F 63 61 74 69 6F 6E 20 6E 75 6D 62 65 72 20 77 69 74 68 69 6E 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 3A 20 00 00 00 00 00 00 00 00 00 00 00 0A 53 69 7A 65 3A 20 00 00 00 00 00 0A 41 64 64 72 65 73 73 3A 20 30 78 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 61 72 65 61 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 6D 65 6D 6F 72 79 20 72 65 73 65 72 76 65 64 20 62 79 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 20 69 73 20 63 6F 72 72 75 70 74 65 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 73 25 73 25 70 25 73 25 7A 64 25 73 25 64 25 73 25 73 25 73 25 73 25 73 00 00 00 00 00 00 00 41 20 76 61 72 69 61 62 6C 65 20 69 73 20 62 65 69 6E 67 20 75 73 65 64 20 77 69 74 68 6F 75 74 20 62 65 69 6E 67 20 69 6E 69 74 69 61 6C 69 7A 65 64 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 88 B2 41 00 A8 B2 41 00 DC B2 41 00 F8 B2 41 00 2C B3 41 00 00 00 00 00 53 74 61 63 6B 20 70 6F 69 6E 74 65 72 20 63 6F 72 72 75 70 74 69 6F 6E 00 00 00 00 00 00 00 00 43 61 73 74 20 74 6F 20 73 6D 61 6C 6C 65 72 20 74 79 70 65 20 63 61 75 73 69 6E 67 20 6C 6F 73 73 20 6F 66 20 64 61 74 61 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 63 6F 72 72 75 70 74 69 6F 6E 00 00 00 00 00 4C 6F 63 61 6C 20 76 61 72 69 61 62 6C 65 20 75 73 65 64 20 62 65 66 6F 72 65 20 69 6E 69 74 69 61 6C 69 7A 61 74 69 6F 6E 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 63 6F 72 72 75 70 74 65 64 00 00 00 00 00 00 00 00 00 00 62 00 69 00 6E 00 5C 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 2E 00 44 00 4C 00 4C 00 00 00 00 00 56 00 43 00 52 00 55 00 4E 00 54 00 49 00 4D 00 45 00 31 00 34 00 30 00 44 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 70 00 69 00 2D 00 6D 00 73 00 2D 00 77 00 69 00 6E 00 2D 00 63 00 6F 00 72 00 65 00 2D 00 72 00 65 00 67 00 69 00 73 00 74 00 72 00 79 00 2D 00 6C 00 31 00 2D 00 31 00 2D 00 30 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 64 00 76 00 61 00 70 00 69 00 33 00 32 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 52 65 67 4F 70 65 6E 4B 65 79 45 78 57 00 00 00 52 65 67 51 75 65 72 79 56 61 6C 75 65 45 78 57 00 00 00 00 52 65 67 43 6C 6F 73 65 4B 65 79 00 00 00 00 00 00 00 00 00 53 00 4F 00 46 00 54 00 57 00 41 00 52 00 45 00 5C 00 57 00 6F 00 77 00 36 00 34 00 33 00 32 00 4E 00 6F 00 64 00 65 00 5C 00 4D 00 69 00 63 00 72 00 6F 00 73 00 6F 00 66 00 74 00 5C 00 56 00 69 00 73 00 75 00 61 00 6C 00 53 00 74 00 75 00 64 00 69 00 6F 00 5C 00 31 00 34 00 2E 00 30 00 5C 00 53 00 65 00 74 00 75 00 70 00 5C 00 56 00 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 00 72 00 6F 00 64 00 75 00 63 00 74 00 44 00 69 00 72 00 00 00 00 00 00 00 00 00 44 00 4C 00 4C 00 00 00 00 00 00 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 00 00 00 00 00 00 00 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 00 00 00 00 00 00 00 00 50 44 42 4F 70 65 6E 56 61 6C 69 64 61 74 65 35 00 00 00 00 72 00 00 00 38 D3 41 00 88 D3 41 00 00 00 00 00 00 00 00 00 60 CC 7B 61 00 00 00 00 02 00 00 00 65 00 00 00 E4 BB 01 00 E4 A1 00 00 00 00 00 00 60 CC 7B 61 00 00 00 00 0C 00 00 00 14 00 00 00 4C BC 01 00 4C A2 00 00 BC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 D0 41 00 00 00 00 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 D3 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

define(Grapic,00401000)
Registersymbol(Grapic)
label(From)
label(Exit)
label(start)
label(ebpretX)
label(Space)
start:
push ebp
mov ebp,esp
sub esp,000000CC { 204 }
push ebx
push esi
push edi
push ecx
lea edi,[ebp-0C]
mov ecx,00000003 { 3 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
pop ecx
mov [ebp-08],ecx
mov ecx,woncode//Projfeect1.exe+1F028 { (16843009) }
call debug//Projfeect1.exe+1141F
mov eax,[ebp-08]
mov [eax],vtavle//0041AB34//Projfeect1.Gdiplus::Image::`vftable' { (00411203) }
mov eax,[ebp-08]
mov [eax+04],00000000 { 0 }
cmp dword ptr [ebp+0C],00 { 0 }
je ebpretX//Projfeect1.Gdiplus::Image::Image+5B
mov eax,[ebp-08]
add eax,04 { 4 }
push eax
mov ecx,[ebp+08]
push ecx
call gdiplus.GdipLoadImageFromFileICM
//Projfeect1.exe+110F5
mov edx,[ebp-08]
mov [edx+08],eax
jmp Projfeect1.Gdiplus::Image::Image+71//ghost Casting
mov eax,[ebp-08]
add eax,04 { 4 }
push eax
mov ecx,[ebp+08]
push ecx
call gdiplus.GdipLoadImageFromFile
//Projfeect1.exe+113B1
mov edx,[ebp-08]
mov [edx+08],eax
mov eax,[ebp-08]
pop edi
pop esi
pop ebx
add esp,000000CC { 204 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
ebpretX:
mov esp,ebp
pop ebp
ret 0008 { 8 }





From:
push ebp
mov ebp,esp
push -01 { 255 }
push Projfeect1.exe+180A3 { (144) }
mov eax,fs:[00000000] { 0 }
push eax
mov fs:[00000000],esp { 0 }
sub esp,000000DC { 220 }
push ebx
push esi
push edi
lea edi,[ebp-28]
mov ecx,00000007 { 7 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,woncode////Projfeect1.exe+1F028 { (01010101) }
call debug//Projfeect1.exe+1141F
push 10 { 16 }
call size //Projfeect1.exe+11055
add esp,04 { 4 }
mov [ebp-000000E0],eax
mov [ebp-04],00000000 { 0 }
cmp dword ptr [ebp-000000E0],00 { 0 }
je Exit//Projfeect1.Gdiplus::Image::FromFile+75
mov eax,[ebp+0C]
push eax
mov ecx,[ebp+08]
push ecx
mov ecx,[ebp-000000E0]
call start//Projfeect1.exe+1134D
mov [ebp-000000E8],eax
jmp Space//Projfeect1.Gdiplus::Image::FromFile+7F
Exit:
mov [ebp-000000E8],00000000 { 0 }
Space:
mov edx,[ebp-000000E8]
mov [ebp-000000D4],edx
mov [ebp-04],FFFFFFFF { -1 }
mov eax,[ebp-000000D4]
mov ecx,[ebp-0C]
mov fs:[00000000],ecx { 0 }
pop edi
pop esi
pop ebx
add esp,000000E8 { 232 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret


00401000:
mov esi,esp
mov eax,[ebp-08]
push eax
call USER32.GetDC//dword ptr [Projfeect1._imp__GetDC] { -&gt;USER32.GetDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov [ebp-000000B0],eax
push 00 { 0 }
push woncode-50//Projfeect1.exe+1AB8C { ("index.png") }
call Projfeect1.exe+11168//From//Projfeect1.exe+11168
add esp,08 { 8 }
mov [ebp-000000BC],eax
mov eax,[ebp-000000B0]
push eax
lea ecx,[ebp-000000CC]
call Projfeect1.exe+111DB
lea ecx,[ebp-000000E4]
call Projfeect1.exe+114AB
mov [ebp-000000E4],00000000 { 0 }
mov [ebp-000000E0],00000000 { 0 }
mov ecx,[ebp-000000BC]
call Projfeect1.exe+1117C
mov [ebp-000000DC],eax
mov ecx,[ebp-000000BC]
call Projfeect1.exe+114CE
mov [ebp-000000D8],eax
lea eax,[ebp-000000E4]
push eax
mov ecx,[ebp-000000BC]
push ecx
lea ecx,[ebp-000000CC]
call Projfeect1.exe+112D0
mov esi,esp
mov eax,[ebp-000000B0]
push eax
mov ecx,[ebp-08]
push ecx
call USER32.ReleaseDC//dword ptr [Projfeect1._imp__ReleaseDC] { -&gt;USER32.ReleaseDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov esi,esp
mov eax,[ebp-000000B0]
push eax
call GDI32.DeleteDC //dword ptr [Projfeect1._imp__DeleteDC] { -&gt;GDI32.DeleteDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov eax,[ebp-000000BC]
mov [ebp-000001B0],eax
cmp dword ptr [ebp-000001B0],00 { 0 }
je Projfeect1.WinMain+277
mov esi,esp
push 01 { 1 }
mov ecx,[ebp-000001B0]
mov edx,[ecx]
mov ecx,[ebp-000001B0]
mov eax,[edx]
call eax
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov [ebp-000001C4],eax
jmp Projfeect1.WinMain+281
mov [ebp-000001C4],00000000 { 0 }
mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
lea eax,[ebp-2C]
push eax
call USER32.GetMessageW//dword ptr [Projfeect1._imp__GetMessageW] { -&gt;USER32.GetMessageW }
cmp esi,esp
call diret//Projfeect1.exe+112FD
test eax,eax
je Projfeect1.WinMain+2C6
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.TranslateMessage //dword ptr [Projfeect1._imp__TranslateMessage] { -&gt;USER32.TranslateMessage }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.DispatchMessageW//dword ptr [Projfeect1._imp__DispatchMessageW] { -&gt;USER32.DispatchMessageW }
cmp esi,esp
call diret//Projfeect1.exe+112FD
jmp Projfeect1.WinMain+281
mov eax,[ebp-80]
push eax
call Projfeect1.exe+114DD
mov eax,[ebp-24]
mov [ebp-000001BC],eax
lea ecx,[ebp-000000CC]
call Projfeect1.exe+113E8
mov eax,[ebp-000001BC]
push edx
mov ecx,ebp
push eax
lea edx,[Projfeect1.WinMain+310] { (8) }
call Projfeect1.exe+1128A
pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,000001C4 { 452 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret 0010 { 16 }




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"db로드 코어 C:\Windows\SysWOW64"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//ValueGare //C:\Users\Administrator\Downloads\c++baseCore\Web\Project1d2\Project1d2\database\savedata
define(savesize,00604520)
Registersymbol(savesize)
define(Bugde,00604324)
Registersymbol(Bugde)
define(saveValue1,00604500)
Registersymbol(saveValue1)
define(loaddataalloc,00606500)
Registersymbol(loaddataalloc)
define(loaddata,00608500)
Registersymbol(loaddata)

define(databasemain,00615200)
Registersymbol(databasemain)
label(Bug1)
label(Bug2)
label(Bug3)
label(Bug4)

define(read1,00004000)
Registersymbol(read1)
define(DatabasePath,00604a00)
Registersymbol(DatabasePath)

DatabasePath:
db '.\DB\test.txt' 00

databasemain:
mov [Bugde],esp
push loaddataalloc//read1
push DatabasePath
call kernel32.FindFirstFileA
Bug4:
cmp eax,-1
je Bug3
cmp eax,0
je Bug3
mov [savesize],eax//Getinza
push [savesize]
call kernel32.FindClose
Bug2:
push read1//read1
push DatabasePath
call ucrtbased.open
cmp eax,-1
je Bug1
cmp eax,0
je Bug1
mov [saveValue1],eax//Getinza
push [loaddataalloc+20] //szie
push loaddata //loadMemory
push eax
call ucrtbased.read
push [saveValue1]
call ucrtbased.close
mov esp,[Bugde] //add esp,18
ret

Bug1:
mov esp,[Bugde]
push 1
call sleep
jmp Bug2

Bug3:
mov esp,[Bugde]
push 1
call sleep
jmp Bug4


createThread(databasemain)
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"다이아그램 미완성 코어"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(Path,0051B000)
Registersymbol(Path)//Path
define(PathDiagram,0051C000)
Registersymbol(PathDiagram)//Path
Path:
db 'x.bmp' 00 00 0A 0A 0A 0A 0A 0A 0A

PathDiagram:
xor esi,esi
mov eax,byte ptr [path]

cmp byte ptr [Path+esi]
ret


//createThread(PathDiagram)
[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"파일생성"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(createFileas,00525300)
Registersymbol(createFileas)

alloc(dataSet2222,218)
Registersymbol(dataSet2222)
alloc(name2222,228)
alloc(interrupt2222,128)
alloc(MemoryLoads,1128)
Registersymbol(MemoryLoads)

name2222:
db 'savedb'

MemoryLoads:
db 'odddpenMemory'

MemoryLoads+90:
//db 'openMemory'


createFileas:
push 00
push 00000080
push 02
push dataSet2222//큰수
push 3
push 40000000
push name2222//name //
call kernel32.CreateFileA
mov [interrupt2222],eax//인자
push 00
push MemoryLoads //적용 메모리 주소
push 7//size
push MemoryLoads+90 //데이터 할당
push eax
call kernel32.WriteFile
mov eax,[interrupt2222]
push eax
call kernel32.CloseHandle
ret

 createThread(createFileas)
 
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"입력 값"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>String</VariableType>
          <Length>10</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>MemoryLoads+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"로드 메모리"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>String</VariableType>
          <Length>10</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>MemoryLoads+90</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"멀티바이트 로직"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(sizefilesa,00762000)
Registersymbol(sizefilesa)
define(loadMemory,00765000)//malloc
Registersymbol(loadMemory)
define(unaddress,00775000)
Registersymbol(unaddress)
define(startapiX,0076f000)
Registersymbol(startapiX)


sizefilesa:
dd #128
unaddress:
db 'fuck' 00
startapiX:
push [sizefilesa] //size
push loadMemory //빈공간에 로드할 address
push unaddress //멀티바이트 어드레스
call ucrtbased.strlen //ucrtbasaeloasd
add esp,04
push [sizefilesa] //size
push unaddress //멀티바이트 어드레스
push 00
push 0000FDE9 //형식 CP_UTF8 의 형식임을 따른다.
call kernel32.MultiByteToWideChar
ret
createThread(startapiX)
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"size"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>sizefilesa</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>14</ID>
              <Description>"loadMemory"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>String</VariableType>
              <Length>10</Length>
              <Unicode>0</Unicode>
              <CodePage>0</CodePage>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>loadMemory</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>15</ID>
                  <Description>"유니코드"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>String</VariableType>
                  <Length>10</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>unaddress</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>16</ID>
                      <Description>"변경된 메모리 ??"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>String</VariableType>
                      <Length>10</Length>
                      <Unicode>0</Unicode>
                      <CodePage>0</CodePage>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>chMemory</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>MSCTF.dll+C3188</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>mfc140ud.dll+6469E0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>Array of byte</VariableType>
      <ByteLength>4</ByteLength>
      <Address>MSCTF.dll+A2C3A</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

define(Debugs,00510000)
Registersymbol(Debugs)
label(Rets)
label(stackCheack)
////////////////////////////////
define(datalist,00511000)
Registersymbol(datalist)
////////////////////////////////////////
define(start,00512000)
Registersymbol(start)
//////////////////////////////
define(memsetX,00513000)
Registersymbol(memsetX)
label(goto2)
label(goto3)
/////////////////////////////
define(Switch,00514000)
Registersymbol(Switch)
label(xors)
label(Post)
label(UsersBeginePaint)
label(GetSystem)
label(EndX)
//////////////////////
define(WinGUI,00515000)
Registersymbol(WinGUI)
//////////////////////
define(main,00516000)
Registersymbol(main)
define(loaddll,00517000)
Registersymbol(loaddll)
define(Pointers,00518000)
Registersymbol(Pointers)

define(handleX,00519000)
Registersymbol(handleX)//Static

define(Static,0051A000)
Registersymbol(Static)//Static





define(sizefilesa,00762000)
Registersymbol(sizefilesa)
define(loadMemory,00765000)//malloc
Registersymbol(loadMemory)
define(unaddress,00775000)
Registersymbol(unaddress)
define(startapiX,0076f000)
Registersymbol(startapiX)



sizefilesa:
dd #428
unaddress:
db '.\etc\logo\main.bmp' 00
unaddress+40:
db '.\etc\logo\main.bmp' 00

startapiX:
push [sizefilesa] //size
push loadMemory //빈공간에 로드할 address
push unaddress //멀티바이트 어드레스
call ucrtbased.strlen //ucrtbasaeloasd
add esp,04
push [sizefilesa] //size
push unaddress //멀티바이트 어드레스
push 00
push 0000FDE9 //형식 CP_UTF8 의 형식임을 따른다.
call kernel32.MultiByteToWideChar

push [sizefilesa] //size
push loadMemory //빈공간에 로드할 address
push unaddress+40 //멀티바이트 어드레스
call ucrtbased.strlen //ucrtbasaeloasd
add esp,04
push [sizefilesa] //size
push unaddress+40 //멀티바이트 어드레스
push 00
push 0000FDE9 //형식 CP_UTF8 의 형식임을 따른다.
call kernel32.MultiByteToWideChar

ret


Static:
db 's' 00 't' 00 'a' 00 't' 00 'i' 00 'c' 00 00 00 //static

Static-50:
db //84 BC BC D2 20 00 74 D0 AD B9 00 00 //createBunt

Static-100:
db 62 00 72 00 6F 00 61 00 2E 00 62 00 6D 00 70 00 00 00 00 00 00 00 00 00 01 C8 A9 C6 00 00 00 00 00 00


Debugs:
push ebp
mov ebp,esp
sub esp,08
mov [ebp-04],ecx
mov eax,[ebp-04]
mov [ebp-08],eax
mov ecx,[ebp-04]
movzx edx,byte ptr [ecx]
test edx,edx
je Rets
call kernel32.GetCurrentThreadId
jne Rets

Rets:
mov esp,ebp
pop ebp
ret

stackCheack:
repne jne stackCheack+5
repne ret
push ebp
mov ebp,esp
sub esp,00
push eax




datalist:
dd 1
datalist+8://헬로 윈도우 프롬트 창
db 48 00 45 00 4C 00 4C 00 4F 00 57 00 49 00 4E 00 44 00 4F 00 57 00 53 00 00 00 00 00 00 00 00 00 1F AA
datalist+100://제목 출력
db 44 00 42 00 56 00 4D 00 20 00 57 00 65 00 62 00 20 00 42 00 72 00 6F 00 73 00 65 00 72 00 00 00 70 00
datalist+200: //프로즌 헬로 윈도우 PE
db 48 00 45 00 4C 00 4C 00 4F 00 57 00 49 00 4E 00 44 00 4F 00 57 00 53 00 00 00 //헬로 윈도우
datalist+300:
db 00 00 'A' 00 'B' 00 'A' 00 'N' 00 'D' 00 'O' 00 'N' 00 'W' 00 'a' 00 'r' 00 'e' 00 'v' 00 'e' 00 'r' 00 '1' 00 00 00 00 00 00 00



Switch:
push ebp
mov ebp,esp
sub esp,00000130 { 304 }
push ebx
push esi
push edi
lea edi,[ebp-70]
mov ecx,0000001C { 28 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,datalist
call Debugs
mov eax,[ebp+0C]
mov [ebp-00000130],eax
cmp dword ptr [ebp-00000130],01 { 1 }
je xors
cmp dword ptr [ebp-00000130],02 { 2 }
je Post//dllgotosgui.WndProc5+C5
cmp dword ptr [ebp-00000130],0F { 15 }
je UsersBeginePaint//dllgotosgui.WndProc5+59
jmp GetSystem//dllgotosgui.WndProc5+DA
xors:
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
UsersBeginePaint:
mov esi,esp
lea eax,[ebp-50]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.BeginPaint//win32u.NtUserBeginPaint //UsersBeginePaint//dword ptr [dllgotosgui._imp__BeginPaint] { -&gt;-&gt;win32u.NtUserBeginPaint } //UsersBeginePaint
cmp esi,esp
call stackCheack
mov [ebp-08],eax
mov esi,esp
lea eax,[ebp-68]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.GetClientRect//dword ptr [dllgotosgui._imp__GetClientRect] { -&gt;USER32.GetClientRect }
cmp esi,esp
call stackCheack
mov esi,esp
push 25 { 37 }
lea eax,[ebp-68]
push eax
push -01 { 255 }
push datalist+300//dllgotosgui.dll+178CC //mesage{ ("Hello, Windows!") }
mov ecx,[ebp-08]
push ecx
call USER32.DrawTextW //dword ptr [dllgotosgui._imp__DrawTextW] { -&gt;USER32.DrawTextW }
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-50]
push eax
mov ecx,[ebp+08]
push ecx
call USER32.EndPaint//dword ptr [dllgotosgui._imp__EndPaint] { -&gt;-&gt;win32u.NtUserEndPaint }
cmp esi,esp
call stackCheack
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
Post:
mov esi,esp
push 00 { 0 }
call USER32.PostQuitMessage//dword ptr [dllgotosgui._imp__PostQuitMessage] { -&gt;USER32.PostQuitMessage }
cmp esi,esp
call stackCheack
xor eax,eax
jmp EndX//dllgotosgui.WndProc5+F9
GetSystem:
mov esi,esp
mov eax,[ebp+14]
push eax
mov ecx,[ebp+10]
push ecx
mov edx,[ebp+0C]
push edx
mov eax,[ebp+08]
push eax
call ntdll.NtdllDefWindowProc_W
//USER32.GetSystemMetricsForDpi+D0//00404000//00404000/USER32.gapfnScSendMessage+AD8// USER32.GetSystemMetricsForDpi+D0//USER32.gapfnScSendMessage+AD8//USER32.GetSystemMetricsForDpi+D0//dword ptr [dllgotosgui._imp__DefWindowProcW] { -&gt;-&gt;USER32.GetSystemMetricsForDpi+D0 }
cmp esi,esp
call stackCheack
EndX:
push edx
mov ecx,ebp
push eax
mov edx,2 { (2) }//lea edx,[dllgotosgui.WndProc5+120] { (2) }
//call dllgotosgui.dll+111CC
pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,00000130 { 304 }
cmp ebp,esp
call stackCheack
mov esp,ebp
pop ebp
ret 0010 { 16 }




WinGUI:
push ebp
mov ebp,esp
sub esp,00000120 { 288 }
push ebx
push esi
push edi
lea edi,[ebp-60]
mov ecx,00000018 { 24 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,datalist//dllgotosgui.dll+1C016 { (1) }
call Debugs//dllgotosgui.dll+112DF
mov [ebp-5C],00000003 { 3 }
mov [ebp-58],Switch //dllgotosgui.dll+11078 { (418793) }
mov [ebp-54],00000000 { 0 }
mov [ebp-50],00000000 { 0 }
mov eax,[ebp+08]
mov [ebp-4C],eax
mov esi,esp
push 00007F00 { 32512 }
push 00 { 0 }
call USER32.LoadIconW //dword ptr [dllgotosgui._imp__LoadIconW] { -&gt;USER32.LoadIconW }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-48],eax
mov esi,esp
push 00007F00 { 32512 }
push 00 { 0 }
call USER32.LoadCursorW//dword ptr [dllgotosgui._imp__LoadCursorW] { -&gt;USER32.LoadCursorW }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-44],eax
mov esi,esp
push 00 { 0 }
call GDI32.GetStockObject//dword ptr [dllgotosgui._imp__GetStockObject] { -&gt;GDI32.GetStockObject }
cmp esi,esp
call stackCheack//stackCheack
mov [ebp-40],eax
mov [ebp-3C],00000000 { 0 }
mov [ebp-38],datalist+8//ClassOwnUTF////dllgotosgui.dll+1A000 { ("HELLOWINDOWS") }
mov esi,esp
lea eax,[ebp-5C]
push eax
call USER32.RegisterClassW //dword ptr [dllgotosgui._imp__RegisterClassW] { -&gt;USER32.RegisterClassW }
cmp esi,esp
call stackCheack
cmp esi,esp
call stackCheack
mov esi,esp
push 00 { 0 }
mov eax,[ebp+08]
push eax
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push #380// X 0000012C { 300 }
push #430// Y 00000258 { 600 }
push 64 { 100 }
push 64 { 100 }
push 10CF0000 { 282001408 }  // WS_OVERLAPPEDWINDOW } //WS_VISIBLE
push datalist+100//dllgotosgui.dll+1788C// DBVM Web Broser//{ ("Hello Windows Application") }
push datalist+200//datalist+200// Type dllgotosgui.dll+1A000 { ("HELLOWINDOWS") }
push 00 { 0 }
call USER32.CreateWindowExW
call stackCheack
mov [handleX],eax
mov [ebp-08],eax




mov esi,esp
push Static-50{ (-759382908) }
push 00 { 0 }
push 00 { 0 }
mov eax,[ebp-08]
push eax
call USER32.FindWindowExW { -&gt;USER32.FindWindowExW }
cmp esi,esp
call stackCheack

mov [handleX+4],eax
mov [ebp-68],eax


mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
mov eax,[ebp-08] //위치 세이브
push eax
push 64{ 100 }
push 64 { 100 }
push 10 { 25 }// 오른쪽왼쪽
push 0 { 70 } //오른쪽 왼쪽
push 5000000E { 1342177294 }
push 00 { 0 }


push Static{ ("Static") }
push 00 { 0 }
call USER32.CreateWindowExW { -&gt;USER32.CreateWindowExW }
cmp esi,esp
call stackCheack
//save??
mov [handleX+8],eax
mov [ebp-68],eax

push 10 { 16 }
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
push loadMemory//path //Static-100 //imagi
push 00 { 0 }
call USER32.LoadImageW { -&gt;USER32.LoadImageW }
cmp esi,esp
call stackCheack

mov [handleX+C],eax


mov esi,esp
mov eax,[handleX+C] { (2114267942) }
push eax
push 00 { 0 }
push 00000172 { 370 }
mov ecx,[handleX+8] { (853824) }
push ecx
call USER32.SendMessageW  { -&gt;USER32.SendMessageW }
call stackCheack
mov [ebp-68],eax



mov esi,esp
mov eax,[ebp+14]
push eax
mov ecx,[ebp-08]
push ecx
call USER32.ShowWindow//win32u.NtUserShowWindow
cmp esi,esp
call stackCheack
mov esi,esp
mov eax,[ebp-08]
push eax
call USER32.UpdateWindow
cmp esi,esp
call stackCheack
GetMesageun24loop:
mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
lea eax,[ebp-2C]
push eax
call USER32.GetMessageW
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.TranslateMessage
cmp esi,esp
call stackCheack
mov esi,esp
lea eax,[ebp-2C]
push eax
call USER32.DispatchMessageW
cmp esi,esp
call stackCheack
jmp GetMesageun24loop
mov eax,[ebp-24]
push edx
mov ecx,ebp
push eax
mov edx,2

pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,00000120 { 288 }
cmp ebp,esp
call stackCheack
mov esp,ebp
pop ebp
ret


memsetX:
push ebp
mov ebp,esp
sub esp,48
push 44
push 00
lea eax,[ebp-48]
push eax
call ntdll.memset
add esp,0C
lea ecx,[ebp-48]
push ecx
call kernel32.GetStartupInfoW
mov edx,[ebp-1C]
and edx,01
je goto2
movzx eax,wordptr[ebp-18]
mov [ebp-04],eax
jmp goto3
goto2:
mov [ebp-04],0000000A
goto3:
mov ax,[ebp-04]
mov esp,ebp
pop ebp
ret


datalist+400:
db 'C:Windows/SysWOW64/dvapi32.dll'
datalist+440:
db 'C:WindowsSysWOW64/msvcrt.dll'
datalist+480:
db 'C:Windows/SysWOW64/msvcp140d.dll'
datalist+4c0:
db 'C:Windows/SysWOW64/winnsi.dll'
datalist+500:
db '.load64/mfc140ud.dll'
datalist+540:
db '.load64/ucrtbased.dll'

main+200:
//push #20
//call sleep
push ebp
mov ebp,esp
sub esp,08
call memsetX
movzx eax,ax
mov [ebp-04],eax
mov [ebp-08],eax
mov ecx,[ebp-04]
push ecx
mov edx,[ebp-08]
push edx
push 00
push 00400000//header
call WinGUI
mov esp,ebp
pop ebp
ret



main: //startapiX
push 0
push 0
push startapiX//start
push startapiX//start
push 0
push 0
call createThread

push #75
call sleep

push 0
push 0
push main+200//start
push main+200//start
push 0
push 0
call createThread
ret

createThread(main)


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+3558</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+357C</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+359C</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+35BC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+3620</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>String</VariableType>
      <Length>191</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>Luncher.exe+368C</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>String</VariableType>
      <Length>32</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>0082C100</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

define(woncode,00403100)
Registersymbol(woncode)

woncode:
db 01 01 01 01 01 01 01 00
woncode+30:
db 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00
woncode-50:// path
db 69 00 6E 00 64 00 65 00 78 00 2E 00 70 00 6E 00 67 00 00 00 00 00 00
00412DCD:
jmp 00401000

define(diret,00401900)
Registersymbol(diret)

diret:
repne jne diret+5
repne ret
push ebp
mov ebp,esp
sub esp,00
push eax






label(debug)
label(Rets)



debug:
push ebp
mov ebp,esp
sub esp,08
mov [ebp-04],ecx
mov eax,[ebp-04]
mov [ebp-08],eax
mov ecx,[ebp-04]
movzx edx,byte ptr [ecx]
test edx,edx
je Rets
call kernel32.GetCurrentThreadId
jne Rets
Rets:
mov esp,ebp
pop ebp
ret


size:
push ebp
mov ebp,esp
sub esp,000000C0 { 192 }
push ebx
push esi
push edi
mov edi,ebp
xor ecx,ecx
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,woncode+30//Projfeect1.exe+1F012 { (1) }
call debug//Projfeect1.exe+1141F
mov eax,[ebp+08]
push eax
call gdiplus.GdipAlloc
pop edi
pop esi
pop ebx
add esp,000000C0 { 192 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret

define(vtavle,007CCC00)
Registersymbol(vtavle)
vtavle:
db 03 12 41 00 D6 11 41 00 00 00 00 00 47 00 65 00 74 00 74 00 69 00 6E 00 67 00 53 00 74 00 61 00 72 00 74 00 65 00 64 00 00 00 00 00 00 00 00 00 47 00 65 00 74 00 74 00 69 00 6E 00 67 00 20 00 53 00 74 00 61 00 72 00 74 00 65 00 64 00 00 00 00 00 00 00 00 00 00 00 69 00 6E 00 64 00 65 00 78 00 2E 00 70 00 6E 00 67 00 00 00 00 00 00 00 00 00 80 3F 88 BA 41 00 E2 14 41 00 00 00 00 00 70 AC 41 00 80 AD 41 00 D8 AE 41 00 FC AE 41 00 3C AF 41 00 70 AF 41 00 01 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 53 74 61 63 6B 20 61 72 6F 75 6E 64 20 74 68 65 20 76 61 72 69 61 62 6C 65 20 27 00 27 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 2E 00 00 00 00 54 68 65 20 76 61 72 69 61 62 6C 65 20 27 00 00 27 20 69 73 20 62 65 69 6E 67 20 75 73 65 64 20 77 69 74 68 6F 75 74 20 62 65 69 6E 67 20 69 6E 69 74 69 61 6C 69 7A 65 64 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 54 68 65 20 76 61 6C 75 65 20 6F 66 20 45 53 50 20 77 61 73 20 6E 6F 74 20 70 72 6F 70 65 72 6C 79 20 73 61 76 65 64 20 61 63 72 6F 73 73 20 61 20 66 75 6E 63 74 69 6F 6E 20 63 61 6C 6C 2E 20 20 54 68 69 73 20 69 73 20 75 73 75 61 6C 6C 79 20 61 20 72 65 73 75 6C 74 20 6F 66 20 63 61 6C 6C 69 6E 67 20 61 20 66 75 6E 63 74 69 6F 6E 20 64 65 63 6C 61 72 65 64 20 77 69 74 68 20 6F 6E 65 20 63 61 6C 6C 69 6E 67 20 63 6F 6E 76 65 6E 74 69 6F 6E 20 77 69 74 68 20 61 20 66 75 6E 63 74 69 6F 6E 20 70 6F 69 6E 74 65 72 20 64 65 63 6C 61 72 65 64 20 77 69 74 68 20 61 20 64 69 66 66 65 72 65 6E 74 20 63 61 6C 6C 69 6E 67 20 63 6F 6E 76 65 6E 74 69 6F 6E 2E 0D 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 20 63 61 73 74 20 74 6F 20 61 20 73 6D 61 6C 6C 65 72 20 64 61 74 61 20 74 79 70 65 20 68 61 73 20 63 61 75 73 65 64 20 61 20 6C 6F 73 73 20 6F 66 20 64 61 74 61 2E 20 20 49 66 20 74 68 69 73 20 77 61 73 20 69 6E 74 65 6E 74 69 6F 6E 61 6C 2C 20 79 6F 75 20 73 68 6F 75 6C 64 20 6D 61 73 6B 20 74 68 65 20 73 6F 75 72 63 65 20 6F 66 20 74 68 65 20 63 61 73 74 20 77 69 74 68 20 74 68 65 20 61 70 70 72 6F 70 72 69 61 74 65 20 62 69 74 6D 61 73 6B 2E 20 20 46 6F 72 20 65 78 61 6D 70 6C 65 3A 20 20 0D 0A 09 63 68 61 72 20 63 20 3D 20 28 69 20 26 20 30 78 46 46 29 3B 0D 0A 43 68 61 6E 67 69 6E 67 20 74 68 65 20 63 6F 64 65 20 69 6E 20 74 68 69 73 20 77 61 79 20 77 69 6C 6C 20 6E 6F 74 20 61 66 66 65 63 74 20 74 68 65 20 71 75 61 6C 69 74 79 20 6F 66 20 74 68 65 20 72 65 73 75 6C 74 69 6E 67 20 6F 70 74 69 6D 69 7A 65 64 20 63 6F 64 65 2E 0D 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 0D 0A 00 00 00 00 00 00 00 00 41 20 6C 6F 63 61 6C 20 76 61 72 69 61 62 6C 65 20 77 61 73 20 75 73 65 64 20 62 65 66 6F 72 65 20 69 74 20 77 61 73 20 69 6E 69 74 69 61 6C 69 7A 65 64 0D 0A 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 77 61 73 20 63 6F 72 72 75 70 74 65 64 0D 0A 00 00 00 00 00 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 52 75 6E 74 69 6D 65 20 43 68 65 63 6B 20 45 72 72 6F 72 0D 0A 00 00 00 00 00 00 00 00 00 00 00 52 00 75 00 6E 00 74 00 69 00 6D 00 65 00 20 00 43 00 68 00 65 00 63 00 6B 00 20 00 45 00 72 00 72 00 6F 00 72 00 2E 00 0D 00 0A 00 20 00 55 00 6E 00 61 00 62 00 6C 00 65 00 20 00 74 00 6F 00 20 00 64 00 69 00 73 00 70 00 6C 00 61 00 79 00 20 00 52 00 54 00 43 00 20 00 4D 00 65 00 73 00 73 00 61 00 67 00 65 00 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 00 75 00 6E 00 2D 00 54 00 69 00 6D 00 65 00 20 00 43 00 68 00 65 00 63 00 6B 00 20 00 46 00 61 00 69 00 6C 00 75 00 72 00 65 00 20 00 23 00 25 00 64 00 20 00 2D 00 20 00 25 00 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 46 69 6C 65 6E 61 6D 65 00 00 00 00 55 6E 6B 6E 6F 77 6E 20 4D 6F 64 75 6C 65 20 4E 61 6D 65 00 00 00 00 00 52 75 6E 2D 54 69 6D 65 20 43 68 65 63 6B 20 46 61 69 6C 75 72 65 20 23 25 64 20 2D 20 25 73 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 63 6F 72 72 75 70 74 65 64 20 6E 65 61 72 20 75 6E 6B 6E 6F 77 6E 20 76 61 72 69 61 62 6C 65 00 00 00 00 00 00 00 00 00 00 00 25 2E 32 58 20 00 00 00 53 74 61 63 6B 20 61 72 65 61 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 6D 65 6D 6F 72 79 20 72 65 73 65 72 76 65 64 20 62 79 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 20 69 73 20 63 6F 72 72 75 70 74 65 64 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00 3E 20 00 00 0A 44 61 74 61 3A 20 3C 00 00 00 00 0A 41 6C 6C 6F 63 61 74 69 6F 6E 20 6E 75 6D 62 65 72 20 77 69 74 68 69 6E 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 3A 20 00 00 00 00 00 00 00 00 00 00 00 0A 53 69 7A 65 3A 20 00 00 00 00 00 0A 41 64 64 72 65 73 73 3A 20 30 78 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 61 72 65 61 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 6D 65 6D 6F 72 79 20 72 65 73 65 72 76 65 64 20 62 79 20 74 68 69 73 20 66 75 6E 63 74 69 6F 6E 20 69 73 20 63 6F 72 72 75 70 74 65 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 73 25 73 25 70 25 73 25 7A 64 25 73 25 64 25 73 25 73 25 73 25 73 25 73 00 00 00 00 00 00 00 41 20 76 61 72 69 61 62 6C 65 20 69 73 20 62 65 69 6E 67 20 75 73 65 64 20 77 69 74 68 6F 75 74 20 62 65 69 6E 67 20 69 6E 69 74 69 61 6C 69 7A 65 64 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 88 B2 41 00 A8 B2 41 00 DC B2 41 00 F8 B2 41 00 2C B3 41 00 00 00 00 00 53 74 61 63 6B 20 70 6F 69 6E 74 65 72 20 63 6F 72 72 75 70 74 69 6F 6E 00 00 00 00 00 00 00 00 43 61 73 74 20 74 6F 20 73 6D 61 6C 6C 65 72 20 74 79 70 65 20 63 61 75 73 69 6E 67 20 6C 6F 73 73 20 6F 66 20 64 61 74 61 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 6D 65 6D 6F 72 79 20 63 6F 72 72 75 70 74 69 6F 6E 00 00 00 00 00 4C 6F 63 61 6C 20 76 61 72 69 61 62 6C 65 20 75 73 65 64 20 62 65 66 6F 72 65 20 69 6E 69 74 69 61 6C 69 7A 61 74 69 6F 6E 00 00 00 00 00 00 00 00 00 00 00 53 74 61 63 6B 20 61 72 6F 75 6E 64 20 5F 61 6C 6C 6F 63 61 20 63 6F 72 72 75 70 74 65 64 00 00 00 00 00 00 00 00 00 00 62 00 69 00 6E 00 5C 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 2E 00 44 00 4C 00 4C 00 00 00 00 00 56 00 43 00 52 00 55 00 4E 00 54 00 49 00 4D 00 45 00 31 00 34 00 30 00 44 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 70 00 69 00 2D 00 6D 00 73 00 2D 00 77 00 69 00 6E 00 2D 00 63 00 6F 00 72 00 65 00 2D 00 72 00 65 00 67 00 69 00 73 00 74 00 72 00 79 00 2D 00 6C 00 31 00 2D 00 31 00 2D 00 30 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 64 00 76 00 61 00 70 00 69 00 33 00 32 00 2E 00 64 00 6C 00 6C 00 00 00 00 00 00 00 00 00 52 65 67 4F 70 65 6E 4B 65 79 45 78 57 00 00 00 52 65 67 51 75 65 72 79 56 61 6C 75 65 45 78 57 00 00 00 00 52 65 67 43 6C 6F 73 65 4B 65 79 00 00 00 00 00 00 00 00 00 53 00 4F 00 46 00 54 00 57 00 41 00 52 00 45 00 5C 00 57 00 6F 00 77 00 36 00 34 00 33 00 32 00 4E 00 6F 00 64 00 65 00 5C 00 4D 00 69 00 63 00 72 00 6F 00 73 00 6F 00 66 00 74 00 5C 00 56 00 69 00 73 00 75 00 61 00 6C 00 53 00 74 00 75 00 64 00 69 00 6F 00 5C 00 31 00 34 00 2E 00 30 00 5C 00 53 00 65 00 74 00 75 00 70 00 5C 00 56 00 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 00 72 00 6F 00 64 00 75 00 63 00 74 00 44 00 69 00 72 00 00 00 00 00 00 00 00 00 44 00 4C 00 4C 00 00 00 00 00 00 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 00 00 00 00 00 00 00 00 4D 00 53 00 50 00 44 00 42 00 31 00 34 00 30 00 00 00 00 00 00 00 00 00 50 44 42 4F 70 65 6E 56 61 6C 69 64 61 74 65 35 00 00 00 00 72 00 00 00 38 D3 41 00 88 D3 41 00 00 00 00 00 00 00 00 00 60 CC 7B 61 00 00 00 00 02 00 00 00 65 00 00 00 E4 BB 01 00 E4 A1 00 00 00 00 00 00 60 CC 7B 61 00 00 00 00 0C 00 00 00 14 00 00 00 4C BC 01 00 4C A2 00 00 BC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 D0 41 00 00 00 00 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 D3 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

define(Grapic,00401000)
Registersymbol(Grapic)
label(From)
label(Exit)
label(start)
label(ebpretX)
label(Space)
start:
push ebp
mov ebp,esp
sub esp,000000CC { 204 }
push ebx
push esi
push edi
push ecx
lea edi,[ebp-0C]
mov ecx,00000003 { 3 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
pop ecx
mov [ebp-08],ecx
mov ecx,woncode//Projfeect1.exe+1F028 { (16843009) }
call debug//Projfeect1.exe+1141F
mov eax,[ebp-08]
mov [eax],vtavle//0041AB34//Projfeect1.Gdiplus::Image::`vftable' { (00411203) }
mov eax,[ebp-08]
mov [eax+04],00000000 { 0 }
cmp dword ptr [ebp+0C],00 { 0 }
je ebpretX//Projfeect1.Gdiplus::Image::Image+5B
mov eax,[ebp-08]
add eax,04 { 4 }
push eax
mov ecx,[ebp+08]
push ecx
call gdiplus.GdipLoadImageFromFileICM
//Projfeect1.exe+110F5
mov edx,[ebp-08]
mov [edx+08],eax
jmp Projfeect1.Gdiplus::Image::Image+71//ghost Casting
mov eax,[ebp-08]
add eax,04 { 4 }
push eax
mov ecx,[ebp+08]
push ecx
call gdiplus.GdipLoadImageFromFile
//Projfeect1.exe+113B1
mov edx,[ebp-08]
mov [edx+08],eax
mov eax,[ebp-08]
pop edi
pop esi
pop ebx
add esp,000000CC { 204 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
ebpretX:
mov esp,ebp
pop ebp
ret 0008 { 8 }


From:
push ebp
mov ebp,esp
push -01 { 255 }
push Projfeect1.exe+180A3 { (144) }
mov eax,fs:[00000000] { 0 }
push eax
mov fs:[00000000],esp { 0 }
sub esp,000000DC { 220 }
push ebx
push esi
push edi
lea edi,[ebp-28]
mov ecx,00000007 { 7 }
mov eax,CCCCCCCC { -858993460 }
repe stosd
mov ecx,woncode////Projfeect1.exe+1F028 { (01010101) }
call debug//Projfeect1.exe+1141F
push 10 { 16 }
call size //Projfeect1.exe+11055
add esp,04 { 4 }
mov [ebp-000000E0],eax
mov [ebp-04],00000000 { 0 }
cmp dword ptr [ebp-000000E0],00 { 0 }
je Exit//Projfeect1.Gdiplus::Image::FromFile+75
mov eax,[ebp+0C]
push eax
mov ecx,[ebp+08]
push ecx
mov ecx,[ebp-000000E0]
call start//Projfeect1.exe+1134D
mov [ebp-000000E8],eax
jmp Space//Projfeect1.Gdiplus::Image::FromFile+7F
Exit:
mov [ebp-000000E8],00000000 { 0 }
Space:
mov edx,[ebp-000000E8]
mov [ebp-000000D4],edx
mov [ebp-04],FFFFFFFF { -1 }
mov eax,[ebp-000000D4]
mov ecx,[ebp-0C]
mov fs:[00000000],ecx { 0 }
pop edi
pop esi
pop ebx
add esp,000000E8 { 232 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret


00401000:
mov esi,esp
mov eax,[ebp-08]
push eax
call USER32.GetDC//dword ptr [Projfeect1._imp__GetDC] { -&gt;USER32.GetDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov [ebp-000000B0],eax
push 00 { 0 }
push woncode-50//Projfeect1.exe+1AB8C { ("index.png") }
call Projfeect1.exe+11168
add esp,08 { 8 }
mov [ebp-000000BC],eax
mov eax,[ebp-000000B0]
push eax
lea ecx,[ebp-000000CC]
call Projfeect1.exe+111DB
lea ecx,[ebp-000000E4]
call Projfeect1.exe+114AB
mov [ebp-000000E4],00000000 { 0 }
mov [ebp-000000E0],00000000 { 0 }
mov ecx,[ebp-000000BC]
call Projfeect1.exe+1117C
mov [ebp-000000DC],eax
mov ecx,[ebp-000000BC]
call Projfeect1.exe+114CE
mov [ebp-000000D8],eax
lea eax,[ebp-000000E4]
push eax
mov ecx,[ebp-000000BC]
push ecx
lea ecx,[ebp-000000CC]
call Projfeect1.exe+112D0
mov esi,esp
mov eax,[ebp-000000B0]
push eax
mov ecx,[ebp-08]
push ecx
call dword ptr [Projfeect1._imp__ReleaseDC] { -&gt;USER32.ReleaseDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov esi,esp
mov eax,[ebp-000000B0]
push eax
call dword ptr [Projfeect1._imp__DeleteDC] { -&gt;GDI32.DeleteDC }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov eax,[ebp-000000BC]
mov [ebp-000001B0],eax
cmp dword ptr [ebp-000001B0],00 { 0 }
je Projfeect1.WinMain+277
mov esi,esp
push 01 { 1 }
mov ecx,[ebp-000001B0]
mov edx,[ecx]
mov ecx,[ebp-000001B0]
mov eax,[edx]
call eax
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov [ebp-000001C4],eax
jmp Projfeect1.WinMain+281
mov [ebp-000001C4],00000000 { 0 }
mov esi,esp
push 00 { 0 }
push 00 { 0 }
push 00 { 0 }
lea eax,[ebp-2C]
push eax
call dword ptr [Projfeect1._imp__GetMessageW] { -&gt;USER32.GetMessageW }
cmp esi,esp
call diret//Projfeect1.exe+112FD
test eax,eax
je Projfeect1.WinMain+2C6
mov esi,esp
lea eax,[ebp-2C]
push eax
call dword ptr [Projfeect1._imp__TranslateMessage] { -&gt;USER32.TranslateMessage }
cmp esi,esp
call diret//Projfeect1.exe+112FD
mov esi,esp
lea eax,[ebp-2C]
push eax
call dword ptr [Projfeect1._imp__DispatchMessageW] { -&gt;USER32.DispatchMessageW }
cmp esi,esp
call diret//Projfeect1.exe+112FD
jmp Projfeect1.WinMain+281
mov eax,[ebp-80]
push eax
call Projfeect1.exe+114DD
mov eax,[ebp-24]
mov [ebp-000001BC],eax
lea ecx,[ebp-000000CC]
call Projfeect1.exe+113E8
mov eax,[ebp-000001BC]
push edx
mov ecx,ebp
push eax
lea edx,[Projfeect1.WinMain+310] { (8) }
call Projfeect1.exe+1128A
pop eax
pop edx
pop edi
pop esi
pop ebx
add esp,000001C4 { 452 }
cmp ebp,esp
call diret//Projfeect1.exe+112FD
mov esp,ebp
pop ebp
ret 0010 { 16 }




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"KERNEL32.DLL"+1DF20</Address>
      <Comment>kernel32.GetCurrentThreadId
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
